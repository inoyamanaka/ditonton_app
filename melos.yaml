name: Ditonton

packages:
  - movies/**
  - tv_series/**
  - core/**
  - '*'


scripts:
  get:
    run: melos exec -- "flutter pub get"
    description: Run `flutter pub get` in all packages
  analyze:
    run: melos exec -- "flutter analyze"
    description: Run `flutter analyze` in all packages
  build_runner:
    run: melos exec -c 1 --depends-on="build_runner" --flutter -- "flutter pub run build_runner build --delete-conflicting-outputs"
    description: Run `dart run build_runner --delete-conflicting-outputs` in all packages
  clean_build:
    run: melos exec -- "flutter clean"
    description: Run `flutter clean` in all packages
  inspect_format:
    run: melos exec -- "dart format . --set-exit-if-changed"
    description: Run `flutter format .` in all packages
  format:
    run: melos exec -- "dart format . "
    description: Run `flutter format .` in all packages
  test:
    run: |
      melos exec --dir-exists="test" --fail-fast -- flutter test --no-pub --coverage
    select-package:
      flutter: true
      dir-exists: test


  combine_coverage:
    description: Merge all packages coverage tracefiles ignoring data related to generated files.
    run: melos exec -- bash"\$MELOS_ROOT_PATH/.\combine_coverage.sh"

  unit_test_and_coverage:
    description: Merge all packages coverage tracefiles ignoring data related to generated files.
    run: |
      
      melos exec -c 1 --file-exists=coverage/lcov.info -- coverde filter --input ./coverage/lcov.info --output MELOS_ROOT_PATH/coverage/filtered.lcov.info --filters \.g\.dart
      coverde value -i coverage/filtered.lcov.info > MELOS_ROOT_PATH/coverage/result.txt
     
